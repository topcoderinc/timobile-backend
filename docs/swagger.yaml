swagger: '2.0'
info:
  title: ThoroughbredInsider REST API
  description: |
    REST API for the ThoroughbredInsider Mobile and Admin Applications.
  version: "1.0.0"
# the domain of the service, it will be updated in final deployment
host: sample.tiapp.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /api/v1
securityDefinitions:
  Bearer:
    description: |
     For accessing the API a valid access token must be passed in all the queries in
     the 'Authorization' header.

     A valid access token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.

    type: apiKey
    name: Authorization
    in: header



produces:
  - application/json
# please note that schemes for all create entity endpoints will not contain ids.
paths:
  /login:
    post:
      summary: Login
      description: |
        Login using username and password. It does not require authentication header(Bearer).
      tags:
        - Security
      parameters:
        - in: body
          name: loginRequest
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                description: The email
                type: string
              password:
                description: The password
                type: string

      responses:
        200:
          description: The operation succeeded. The token will be returned.
          schema:
            $ref: '#/definitions/TokenResponse'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - not verified user.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'
  /signup:
    post:
      summary: Create User.
      description: |
        Create User. Please note that user scheme for this endpoint will additionally contain password.
      tags:
        - User
        - Security
      parameters:
        - name: user
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/User'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'
  /auth/facebook:
    get:
      summary: Login with Facebook,
      description: |
        Login using Facebook, the last step will redirect to tiMobile://social?accessToken=183bec67-f949-4f54-9d3d-f7c9c61bb568-1514444443358&type=facebook, ios and android maybe need use this link switch to app, and then use GET /getCurrentUser to fetch information.
      tags:
        - Security
      responses:
        '200':
          description: The operation succeeded.
        '400':
          description: >-
            BAD REQUEST - if there was problem with the request (e.g. malformed
            or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: >-
            NOT AUTHORIZED - if the request didn't bear authentication
            information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: >-
            INTERNAL SERVER ERROR - if the request was properly formatted, but
            the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /logout:
    post:
      summary: Log out.
      description: |
        Logging out. It requires authentication header(Bearer).
      tags:
        - Security
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded.
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /verifyEmail:
    get:
      summary: verify email.
      description: |
        verify email.
      tags:
        - User
        - Security
      parameters:
        - name: email
          in: query
          description: The email
          required: true
          type: string
        - name: verificationToken
          in: query
          description: The verification token
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
          schema:
            type: boolean
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /initiateForgotPassword:
    post:
      summary: Initiate forgot password
      description: |
        Initiate forgot password.
      tags:
        - Security
      parameters:
        - name: email
          in: query
          description: The email
          required: true
          type: string

      responses:
        200:
          description: The operation succeeded.
          schema:
            type: boolean
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /changeForgotPassword:
    post:
      summary: Change forgot password
      description: |
        Change forgot password.
      tags:
        - Security
      parameters:
        - in: body
          name: forgotPasswordData
          schema:
            type: object
            required:
              - email
              - newPassword
              - forgotPasswordToken
            properties:
              email:
                description: The email
                type: string
              forgotPasswordToken:
                description: The forgot password token
                type: string
              newPassword:
                description: The new password
                type: string

      responses:
        200:
          description: The operation succeeded.
          schema:
            type: boolean
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /updatePassword:
    put:
      summary: Update user password.
      description: |
        update User password.
      tags:
        - User
        - Security
      security:
        - Bearer: []
      parameters:
        - in: body
          name: updatePasswordRequest
          schema:
            type: object
            required:
              - oldPassword
              - newPassword
            properties:
              oldPassword:
                description: The oldPassword
                type: string
              newPassword:
                description: The newPassword
                type: string
      responses:
        200:
          description: The operation succeeded.
          schema:
            type: boolean
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /users:
    get:
      summary: Search Users.
      description: |
        Search Users. Allowed roles: Admins only.
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: username
          in: query
          description: The username
          required: false
          type: string
        - name: email
          in: query
          description: an email
          required: false
          type: string
        - name: roles
          in: query
          description: the comma separated roles
          required: false
          type: string
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The search result will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/User'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /users/{id}:
    put:
      summary: Update User. User password is updated in a separate method.
      description: |
        update User.
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: user
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/User'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'
    get:
      summary: Get the User.
      description: |
        retrieve User. Allowed roles: Admins only.
      tags:
        - User
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/User'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - user doesn't have proper role
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser:
    get:
      summary: Get current User.
      description: |
        retrieve User.
      tags:
        - User
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/User'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/statistics:
    get:
      summary: Get current User's statistics.
      description: |
        retrieve User statistics.
      tags:
        - User
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/UserStatistics'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'



  /racetracks:
    post:
      summary: Create Racetrack.
      description: |
        Create Racetrack. Allowed roles: Admins only.
      tags:
        - Racetrack
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Racetrack'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Racetrack'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Search Racetracks.
      description: |
        Search Racetracks. this can sort by 'id', 'name', 'distance', 'stateId', 'locality', 'street'
      tags:
        - Racetrack
      security:
        - Bearer: []
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          type: string
        - name: stateIds
          in: query
          description: The comma separated state IDs
          required: false
          type: string
        - name: distanceToLocationMiles
          in: query
          type: integer
          format: int32
          required: false
          description: the distance to location
        - name: locationLat
          in: query
          description: The location lat
          required: false
          type: number
          format: float
        - name: locationLng
          in: query
          description: The location lng
          required: false
          type: number
          format: float
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/Racetrack'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /racetracks/{id}:
    put:
      summary: Update Racetrack.
      description: |
        Update Racetrack. Allowed roles: Admins only.
      tags:
        - Racetrack
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Racetrack'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/Racetrack'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get Racetrack.
      description: |
        Get Racetrack.
      tags:
        - Racetrack
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Racetrack'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete Racetrack
      description: |
        Delete Racetrack. Allowed roles: Admins only.
      tags:
        - Racetrack
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /racetracks/{id}/bookmark:
    post:
      summary: Bookmark Racetrack.
      description: |
        Bookmark Racetrack. Allowed roles: Users only.
      tags:
        - Racetrack
        - BookmarkedRacetrack
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/BookmarkedRacetrack'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


    delete:
      summary: Delete Racetrack Bookmark
      description: |
        Delete Racetrack bookmark. Allowed roles: Users only.
      tags:
        - Racetrack
        - BookmarkedRacetrack
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/racetrackBookmarks:
    get:
      summary: Get all user's Racetrack Bookmars.
      description: |
        Get all user's Racetrack Bookmars. Allowed roles: Users only.
      tags:
        - Racetrack
        - BookmarkedRacetrack
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/BookmarkedRacetrack'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /cards:
    post:
      summary: Create Card.
      description: |
        Create Card. Allowed roles: Admins only.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Card'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Card'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Search Cards.
      description: |
        Search Cards.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          type: string
        - name: trackStoryId
          in: query
          description: The track story ID
          required: false
          type: string
        - name: types
          in: query
          type: string
          description: the comma separated types
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/Card'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /cards/{id}:
    put:
      summary: Update Card.
      description: |
        Update Card. Allowed roles: Admins only.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Card'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/Card'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get Card.
      description: |
        Get Card.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Card'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete Card
      description: |
        Delete Card. Allowed roles: Admins only.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /cards/{id}/purchase:
    post:
      summary: Purchase Card.
      description: |
        Purchase Card. Allowed roles: Users only.
      tags:
        - Card
        - UserCard
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The purchased entity will be returned.
          schema:
            $ref: '#/definitions/UserCard'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/userCards:
    get:
      summary: Get all User Cards.
      description: |
        Get All User Cards.
      tags:
        - Card
        - UserCard
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserCard'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/userBadges:
    get:
      summary: Get all User Badges.
      description: |
        Get All User Badges.
      tags:
        - UserBadge
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserBadge'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'



  /tags:
    post:
      summary: Create Tag.
      description: |
        Create Tag. Allowed roles: Admins only.
      tags:
        - Tag
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Tag'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get all Tags.
      description: |
        Get all Tags.
      tags:
        - Tag
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Tag'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /tags/{id}:
    put:
      summary: Update Tag.
      description: |
        Update Tag. Allowed roles: Admins only.
      tags:
        - Tag
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Tag'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get Tag.
      description: |
        Get Tag.
      tags:
        - Tag
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Tag'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete Tag
      description: |
        Delete Tag. Allowed roles: Admins only.
      tags:
        - Tag
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /comments:
    post:
      summary: Create Comment.
      description: |
        Create Comment.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Search Comments.
      description: |
        Search Comments.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: query
          description: The user id
          required: false
          type: integer
          format: int64
        - name: chapterId
          in: query
          description: The chapter id.
          required: false
          type: integer
          format: int64
        - name: trackStoryId
          in: query
          description: The track story id.
          required: false
          type: integer
          format: int64
        - name: types
          in: query
          description: The comma separated types
          required: false
          type: string
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/Comment'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /count/comments:
    get:
      summary: Count Comments.
      description: |
        Count Comments.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: query
          description: The user id
          required: false
          type: integer
          format: int64
        - name: chapterId
          in: query
          description: The chapter id.
          required: false
          type: integer
          format: int64
        - name: trackStoryId
          in: query
          description: The track story id.
          required: false
          type: integer
          format: int64
        - name: types
          in: query
          description: The comma separated types
          required: false
          type: string
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The count will be returned.
          schema:
            type: object
            properties:
              count:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /comments/{id}:
    put:
      summary: Update Comment.
      description: |
        Update Comment.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get Comment.
      description: |
        Get Comment.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Comment'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete Comment
      description: |
        Delete Comment.
      tags:
        - Comment
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /trackStories:
    post:
      summary: Create TrackStory.
      description: |
        Create TrackStory. Allowed roles: Admins only.
      tags:
        - Card
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/TrackStory'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/TrackStory'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Search TrackStories.
      description: |
        Search TrackStories. sortColumn can be 'id', 'title', 'subtitle','distance', if you want sort by 'distance',locationLat and locationLng must not be empty, the distance on response unit is meters
      tags:
        - TrackStory
      security:
        - Bearer: []
      parameters:
        - name: title
          in: query
          description: The name.
          required: false
          type: string
        - name: racetrackId
          in: query
          description: The racetrack ID
          required: false
          type: string
        - name: tagIds
          in: query
          type: string
          required: false
          description: the comma separated tag ids
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: locationLat
          in: query
          type: number
          required: false
          description: the current location lat
        - name: locationLng
          in: query
          type: number
          required: false
          description: the current location lng
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/TrackStory'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /trackStories/{id}:
    put:
      summary: Update TrackStory.
      description: |
        Update TrackStory. Allowed roles: Admins only.
      tags:
        - TrackStory
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/TrackStory'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/TrackStory'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get TrackStory.
      description: |
        Get TrackStory.
      tags:
        - TrackStory
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/TrackStory'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete TrackStory
      description: |
        Delete TrackStory. Allowed roles: Admins only.
      tags:
        - TrackStory
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /trackStories/{id}/userProgress:
    get:
      summary: Get TrackStoryUserProgress for the given story.
      description: |
        Get TrackStoryUserProgress.
      tags:
        - TrackStory
        - TrackStoryUserProgress
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/TrackStoryUserProgress'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /currentUser/trackStoryUserProgress/{id}:
    put:
      summary: Update TrackStoryUserProgress.
      description: |
        Update TrackStoryUserProgress. Allowed roles: Users only.
      tags:
        - TrackStory
        - TrackStoryUserProgress
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/TrackStoryUserProgress'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/TrackStoryUserProgress'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/trackStoryUserProgress/{id}/complete:
    put:
      summary: Complete TrackStoryUserProgress.
      description: |
        Complete TrackStoryUserProgress. Allowed roles: Users only.
      tags:
        - TrackStory
        - TrackStoryUserProgress
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/trackStoryUserProgress/{id}/receiveRewards:
    put:
      summary: Receive TrackStory rewards .
      description: |
        Receive rewards for completed TrackStoryUserProgress. Allowed roles: Users only.
      tags:
        - TrackStory
        - TrackStoryUserProgress
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
          schema:
            $ref: '#/definitions/TrackStoryRewards'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/trackStoryUserProgress/{id}/completeAdditionalTask:
    put:
      summary: Complete additional task .
      description: |
        Complete additional task. Allowed roles: Users only.
      tags:
        - TrackStory
        - TrackStoryUserProgress
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
          schema:
            type: boolean
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'



  /currentUser/trackStoryUserProgress:
    get:
      summary: Get all TrackStoryUserProgress entities for the given user.
      description: |
        Get all TrackStoryUserProgress. Allowed roles: Users only.
      tags:
        - TrackStoryUserProgress
        - TrackStory
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/TrackStoryUserProgress'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /achievements:
    post:
      summary: Create Achievement.
      description: |
        Create Achievement. Allowed roles: Admins only.
      tags:
        - Achievement
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Achievement'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Achievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get all Achievements.
      description: |
        Get all Achievements.
      tags:
        - Achievement
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /achievements/{id}:
    put:
      summary: Update Achievement.
      description: |
        Update Achievement. Allowed roles: Admins only.
      tags:
        - Achievement
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/Achievement'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/Achievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get Achievement.
      description: |
        Get Achievement.
      tags:
        - Achievement
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/Achievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete Achievement
      description: |
        Delete Achievement. Allowed roles: Admins only.
      tags:
        - Achievement
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/achievements/checkForNew:
    post:
      summary: Check for new UserAchievements.
      description: |
        Check for new UserAchievements. Allowed roles: Users only.
      tags:
        - Achievement
        - UserAchievement
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAchievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/achievements:
    get:
      summary: Get all UserAchievements.
      description: |
        Get all UserAchievements.
      tags:
        - Achievement
        - UserAchievement
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserAchievement'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /dailyTasks:
    post:
      summary: Create DailyTask.
      description: |
        Create DailyTask. Allowed roles: Admins only.
      tags:
        - DailyTask
      security:
        - Bearer: []
      parameters:
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/DailyTask'
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/DailyTask'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Search DailyTasks.
      description: |
        Search DailyTasks.
      tags:
        - DailyTask
      security:
        - Bearer: []
      parameters:
        - name: name
          in: query
          description: The name.
          required: false
          type: string
        - name: startingDate
          in: query
          description: The starting date
          required: false
          type: string
          format: date
        - name: endingDate
          in: query
          description: The ending date
          required: false
          type: string
          format: date
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
        - name: sortColumn
          in: query
          description: The sort order
          required: false
          type: string
        - name: sortOrder
          in: query
          description: The sort order
          required: false
          type: string
          enum: [asc,desc]
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/DailyTask'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /dailyTasks/{id}:
    put:
      summary: Update DailyTask.
      description: |
        Update DailyTask. Allowed roles: Admins only.
      tags:
        - DailyTask
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/DailyTask'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/DailyTask'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    get:
      summary: Get DailyTask.
      description: |
        Get DailyTask.
      tags:
        - DailyTask
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded. The entity will be returned.
          schema:
            $ref: '#/definitions/DailyTask'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if required resource does not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

    delete:
      summary: Delete DailyTask
      description: |
        Delete DailyTask. Allowed roles: Admins only.
      tags:
        - DailyTask
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
      responses:
        200:
          description: The operation succeeded.
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /currentUser/userDailyTasks:
    get:
      summary: Get all UserDailyTasks.
      description: |
        Search UserDailyTasks.
      tags:
        - DailyTask
        - UserDailyTask
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDailyTask'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /currentUser/userDailyTasks/{id}/complete:
    put:
      summary: Complete UserDailyTask.
      description: |
        Complete UserDailyTask. Allowed roles: Users only.
      tags:
        - DailyTask
        - UserDailyTask
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/DailyTask'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/DailyTask'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'

  /currentUser/userPreferenceOptions:
    get:
      summary: Get all UserPreferenceOptions.
      description: |
        Get all UserPreferenceOptions.
      tags:
        - UserPreferenceOption
      security:
        - Bearer: []
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserPreferenceOption'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /currentUser/userPreferenceOptions/{id}:
    put:
      summary: Update UserPreferenceOptions.
      description: |
        Update UserPreferenceOptions. Allowed roles: Users only.
      tags:
        - UserPreferenceOption
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: The entity ID
          required: true
          type: string
        - name: entity
          in: body
          description: The entity
          required: true
          schema:
            $ref: '#/definitions/UserPreferenceOption'
      responses:
        200:
          description: The operation succeeded. The updated entity will be returned.
          schema:
            $ref: '#/definitions/UserPreferenceOption'
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        403:
          description: FORBIDDEN - if the requesting user didn't have permission to perform the requested operation
          schema:
            $ref: '#/definitions/Error'
        404:
          description: NOT FOUND - if the resource in request did not exist
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'



  /lookup/states:
    get:
      summary: Get all States.
      description: |
        Get all States.
      tags:
        - Lookup
      parameters:
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: name
          in: query
          type: string
          required: false
          description: filter by state value
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/State'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'


  /lookup/prefereceOptions:
    get:
      summary: Get all PrefereceOptions.
      description: |
        Get all States.
      tags:
        - Lookup
      parameters:
        - name: offset
          in: query
          type: integer
          format: int32
          required: false
          description: the offset
        - name: limit
          in: query
          type: integer
          format: int32
          required: false
          description: the limit
      responses:
        200:
          description: The operation succeeded. The entities will be returned.
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/definitions/PreferenceOption'
              offset:
                type: integer
                format: int32
              limit:
                type: integer
                format: int32
              total:
                type: integer
                format: int32
        400:
          description: BAD REQUEST - if there was problem with the request (e.g. malformed or some parameters are missing)
          schema:
            $ref: '#/definitions/Error'
        401:
          description: NOT AUTHORIZED - if the request didn't bear authentication information or the authentication information is invalid.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: INTERNAL SERVER ERROR - if the request was properly formatted, but the operation failed on the server side
          schema:
            $ref: '#/definitions/Error'



definitions:
  State:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      value:
        type: string
        description: The value.
  User:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      firstName:
        type: string
        description: The first name.
      lastName:
        type: string
        description: The last name.
      email:
        type: string
        description: The email.
      role:
        type: string
        enum: [Admin,User]
        description: The role.
      pointsAmount:
        type: integer
        description: The amount of points.
      profilePhotoURL:
        type: string
        description: the profile photo URL

  Racetrack:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The description.
      state:
        $ref: '#/definitions/State'
      locality:
        type: string
        description: The locality.
      street:
        type: string
        description: The street.
      locationLat:
        type: number
        format: float
        description: location lat.
      locationLng:
        type: number
        format: float
        description: location lng.

  TrackStory:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      title:
        type: string
        description: The title.
      subtitle:
        type: string
        description: The subtitle.
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      chapters:
        type: array
        items:
          $ref: '#/definitions/Chapter'
      cards:
        type: array
        items:
          $ref: '#/definitions/Card'
      racetrack:
        $ref: '#/definitions/Racetrack'
      smallImageURL:
        type: string
        description: small image URL
      largeImageURL:
        type: string
        description: large image URL
      badge:
        $ref: '#/definitions/Badge'
      additionalTask:
        $ref: '#/definitions/AdditionalTask'

  TrackStoryUserProgress:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the track story.
      userId:
        type: integer
        format: int64
        description: The ID of the user.
      chaptersUserProgress:
        type: array
        items:
          $ref: '#/definitions/ChapterUserProgress'
      completed:
        type: boolean
        description: The completed flag.
      cardsAndRewardsReceived:
        type: boolean
        description: The cards and rewards received flag.
      additionalTaskCompleted:
        type: boolean
        description: The additional task completed flag.

  ChapterUserProgress:
    properties:
      chapterId:
        type: integer
        format: int64
        description: The ID of the chapter.
      trackStoryUserProgressId:
        type: integer
        format: int64
        description: The ID of the track story.
      wordsRead:
        type: integer
        description: The number of words read.
      completed:
        type: boolean
        description: The completed flag.

  Tag:
    properties:
      id:
        type: string
        description: The ID of the entity.
      value:
        type: string
        description: The value.

  PreferenceOption:
    properties:
      id:
        type: string
        description: The ID of the entity.
      value:
        type: string
        description: The value.
      default:
        type: boolean
        description: The default value.

  Chapter:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the TrackStory.
      number:
        type: integer
        description: The number of the chapter.
      title:
        type: string
        description: The title.
      subtitle:
        type: string
        description: The subtitle.
      content:
        type: string
        description: The content.
      wordsCount:
        type: integer
        description: The number of words.

  Badge:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the TrackStory.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The discription
      imageUrl:
        type: string
        description: The image url.

  Card:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the TrackStory.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The discription.
      imageUrl:
        type: string
        description: The image url.
      type:
        type: string
        enum: [Market,TrackStory]
        description: The card type.
      price:
        type: integer
        description: The price.

  AdditionalTask:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the TrackStory.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The discription.
      points:
        type: integer
        description: The points.

  Comment:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      trackStoryId:
        type: integer
        format: int64
        description: The ID of the TrackStory.
      chapterId:
        type: integer
        format: int64
        description: The ID of the Chapter.
      text:
        type: string
        description: The content.
      user:
        $ref: '#/definitions/User'
      type:
        type: string
        enum: [TrackStory,Chapter]
        description: The card type.
      createdAt:
        type: string
        format: date
        description: The created at date.
      updatedAt:
        type: string
        format: date
        description: The updated at date.

  DailyTask:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The discription.
      points:
        type: integer
        description: The points.
      date:
        type: string
        format: date
        description: The date.
      partnerLink:
        type: string
        description: The partner link.
      active:
        type: boolean
        description: The active flag.

  Achievement:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      name:
        type: string
        description: The name.
      description:
        type: string
        description: The discription.
      imageUrl:
        type: string
        description: The image url.
      achievementRule:
        $ref: '#/definitions/AchievementRule'

  AchievementRule:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      achievementId:
        type: integer
        format: int64
        description: The ID of the achievement.
      model:
        type: string
        description: The model name.
      whereClause:
        type: string
        description: Where clause.
      countNumber:
        type: integer
        description: The count number.

  UserDailyTask:
    properties:
      id:
        type: integer
        format: int64
        description: The ID of the entity.
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      dailyTask:
        $ref: '#/definitions/DailyTask'
      createdAt:
        type: string
        format: date
        description: The created at date.
      completed:
        type: boolean
        description: The completed flag.

  UserBadge:
    properties:
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      badge:
        $ref: '#/definitions/Badge'
      createdAt:
        type: string
        format: date
        description: The created at date.

  UserPreferenceOption:
    properties:
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      preferenceOption:
        $ref: '#/definitions/PreferenceOption'
      createdAt:
        type: string
        format: date
        description: The created at date.
      selected:
        type: boolean
        description: whether it is selected

  UserCard:
    properties:
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      card:
        $ref: '#/definitions/Card'
      createdAt:
        type: string
        format: date
        description: The created at date.

  UserAchievement:
    properties:
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      achievement:
        $ref: '#/definitions/Achievement'
      createdAt:
        type: string
        format: date
        description: The created at date.

  BookmarkedRacetrack:
    properties:
      userId:
        type: integer
        format: int64
        description: The ID of the User.
      racetrack:
        $ref: '#/definitions/Racetrack'
      createdAt:
        type: string
        format: date
        description: The created at date.

  UserStatistics:
    properties:
      commentsNumber:
        type: integer
        description: The comments number.
      completedStoriesNumber:
        type: integer
        description: The completed stories number.
      cardsNumber:
        type: integer
        description: The cards number.
      badgesNumber:
        type: integer
        description: The badges number.

  TrackStoryRewards:
    properties:
      userBadge:
        $ref: '#/definitions/UserBadge'
      userCards:
        type: array
        items:
          $ref: '#/definitions/UserCard'

  Error:
    properties:
      message:
        type: string
        description: The error message.

  TokenResponse:
    properties:
      accessToken:
        type: string
        description: The token.
      accessTokenValidUntil:
        type: string
        format: date
        description: The token valid until.
